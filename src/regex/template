A regex is used as a search pattern for strings. Using regex, we can find either a single match or multiple
matches as well. we can look for any king of match in a string e.g a simple character, a fixed string or any
complex pattern of characters such email, SSN or domain names.

1.Regular expressions
	Regular expressions are the key to powerful, flexible, and efficient text processing, It allow you to 
	describe and parse text. Regular expression can add, remove , isolate and generally fold, spindle, and mutilate 
	all kinds of text and data.
	
	1.1. Metacharacters and literals
	
	Full regular expressions are composed of two types of characters.
		- The special characters (like the * from the filename analogy) are called metacharacters
		- The rest are call literals, or normal text characters
	Regex gain usefullness from advanced expressive powers that their metacharacters provide. We can
	think of literal text acting as the words and metacharacters as the grammer. The words and 
	metacharacters as the grammar. The words are combined with grammar according to a set of rules
	to create an expression that communicates an idea 
2. Regex Metacharacters
	Let's explore the commonly used metacharacters to understand them better
	
	2.1 Start and End of the line
	
	The start and end are represented with '^'(caret) and '$' (dollar) signs. The caret and dollar are special
	in that they match a position in the line rather than any actual text characters themselves
	
	For example, the regular expression "cat" finds 'cat' anywhere in the string, but "^cat" matches only 
	if the 'cat' is at the beginning of the lines. e.g. words like 'category' or 'catalogue'.
	Similarly, "cat$" mathes only if the 'cat' is at the end of the line. e.g. words like 'scat'.
	
	2.2. Character Classes
	
	The regular-expression construct "[...]", usually called a character class, lets us list the characters
	we want to allow at that point in the match. Character classes are useful in creating spell-checkers.
	
	For example, while "e" matches just an e, and "a" matches just an a, the regular expression [ea] matches
	either, e.g. sep[ea]r[ea]te will match all the words "seperate" "separate" and "separete".
	
	Another example can be to allow capitalization of a word's  first letter e.g. [Ss]mith will allow the 
	words smith and Smith both.
	
	Similarly, <[hH][123456]> will match all heading tags i.e. H1, H2, H3, H4, H5 and H6.
	
		2.2.1. Range of characters
		
		A dash " - " indicates a of characters. <[hH][1-6]> is similar to <[hH][123456]>. Other useful character
		ranges are [0-9] and [a-z] which match digits and English lowercase lettes.
		
		We can specify multiple ranges in single construct e.g. [0123456789abcdefABCDEF] can be written as 
		[0-9a-fA-F]. Note that order in which ranges are given doesn't matter.
		
		Note that a dash is a metacharacter only within a character class, otherwise it matches the normal
		dash character. Also, if it is the first character list in the range, it can't possibly indicate a range,
		so it will not be meta character in this case.
		
		2.2.2. Negated character classes
		
		If we use negation sign ( ^ ) in a character class then the class matches any character that isn't listed.
		[^1-6] matches a character that's not 1 through 6
		
	2.3 Matching Any Character with Dot
	
	The metacharacter ' . ' is a shorthand for a character class that any character. Note that dots are not 
	metacharacter when they are used within character classes. Within character chass, it is a simple character
	only. For example, 06.24.2019 will match 06/24/2019 or 06-24-2019 or 06.24.2019. But 06[.]24[.]2019 will
	match only 06.24.2019
	
	2.4. Matching Alternation - any one of several sub-expressions
	
	Pipe symbol '|' allows you to combine multiple expressions into a single expression that matches any of
	the individual ones.
	
	For example. "Alex" and "Brian" are separate expression, but "Alex|Brian" is one expression that matches
	either of both.
	
	Similar to dot, pipe is not metacharacter when it is used within character class. Within character class
	it is a simple character only.
	
	For example, to match the words "First" or "1st", we can write regex - "(First|1st)" or in shorthand 
	"(Fir|1)st"
	
	3. Java Regex API
	
	Java has inbuilt API (java.util.regex) to work with regular expressions.
	
	Java Regex API provides 1 interface and 3 classes:
		+)   Pattern - A regular expression, specified as a string, must first be compiled into an instance
		of this class. The resulting pattern can then be used to create a Matcher object that can match 
		arbitrary character sequences against the regular expression.
		
		Pattern p  = Pattern.compile("abc");
		Matcher m = p.matcher("abcabcabcd");
		boolean b = m.matches();//true.
		
		+)   Matcher - This class provides methods that perform match operations.
		+)	 MatcheResult(interface) - It is result of a match operation, It contains query methods used
			 to determine the results of a match against a regular expression.
		+)	 PatternSyntaxException - It is an unchecked exception thrown to indicate a syntax error in a 
			 regular-expression pattern. 
		
		3.1. Pattern class
		
		It represents the compiled representation of a regular expression. To use Java regex API, we must
		compile the regular expression to this class.
		
		After compilation. it's instance can be used to create a Matcher object that can match lines/strings
		against the regular expression
		
		Note that many matchers can share the same pattern. State information during processing is kept inside
		Matcher instance.
		
		Instances of this class are immutable and are safe for use by multiple concurrent threads.
		
			.	Predicate asPredicate()- Can be used to match a string
			.	static Pattern compile(String regex) - It is used to compile the given regular expression into
				a pattern.
			
			.	static Pattern copile(String regex, int flags) - It is used to compile the given regular
				expression into a pattern with the given flags.
				
			.	int flags() - It is used to return this pattern's match flags.
			
			.	Matcher matcher(CharSequence input) - It us used to create a matcher that will match the given 
				input against this pattern.
				
			.	static boolean matches(String regex, CharSequence input) - It is used to compile the given regular
				expression an attempts to match the given input against it.
				
			.	String pattern() - It is used to return the regular expression from which this pattern was compiled
			
			.	static String quote(String s) - It is used to split the given input sequence around matches of this pattern
			
			.	String[] split(CharSequence input) - It is used to split the given input sequence around match
				of this pattern
			
			
			
			
		
	
	
	
	
	
	
	
	
	
	
	
	