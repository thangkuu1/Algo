A collection, as name implies, is group of objects. Java Collections framework is consist of the interfaces and
classes which helps in working with different types of collections such as lists, sets, maps, stacks and queues

These ready-to-use collection classes solve lost of very common problems where we need to deal with group of 
homogeneous as well as heterogeneous objects. The common operations in involve add, remove, update, sort, search
and more complex algorithms. These collection classes provide very transparent support for all such operations
using Collections APIs.

1. Java Collections Hierarchy

The Collections framework is better understood with the help of core interfaces. The collections classes 
implement these interfaces and provide concrete functionalities.

Collection (Set-> SortedSet, List, Queue, Deque)
Map(SortedMap)

	1.1 Collection
	Collection interface is at the root of the hierarchy. Collection interface provides all general purpose
	methods which all collections classes must support (or throw UnsupportedOperationException). It extend
	Iterable interface which adds support for iterating over collection elements using the 'for-each loop' 
	statement.
	
	All other collection interface and classes (except Map) eith extend or implement this interface. 
	For example. List(indexed, ordered) and Set(sorted) interfaces implement this collection.
	
	1.2 List.
	List represents an ordered collection of element. Using lists, we can access elements by their integer index
	(position in the list), and search for elements in the list, index start with 0 just like an array.
	
	Some useful classes which implement List interface are ArrayList, CopyOnWriteArrayList, LinkedList, Stack
	and Vector
	
	1.3 Set.
	
	Sets represents a collection of sorted elements. Set do not allow the duplicate elements. Set interface
	does not provides no guarantee to return the elements in any predictable, though some Set implementations
	store elements in their natural ordering and guarantee this order.
	
	Some useful classes which element Set interface are ConcurrentSkipListSet, CopyOnWriteArraySet, EnumSet,
	HashSet, LinkedHashSet, LinkedHashSet and TreeSet.
	
	1.4. Map.
	The Map interface enable us to store data in key-value pairs (Keys should be immutable). A map cannot 
	contain duplicate keys, each key can map to most one value.
	
	The Map interfaces provides three collection views, which allow a map's contents to be viewed as a set
	of keys. collection of values, or set of key-value mappings, Some map implementations, like the TreeMap
	class, make specific guarantees as to their order, others, like the HashMap class, do not.
	
	Some useful classes which implement Map interface are - ConcurrentHashMap, ConcurrentSkipListMap, EnumMap,
	HashMap, HashTable, IdentityHashMap, LinkedHashMap, Properties, TreeMap and WeakHashMap.
	
	1.5. Stack.
	
	The Java Stack interface represents a classical stack data structure, where elements can be push to
	last-in-first-out (LIFO) stach of objects. In Stack we push an element to the top of the stack, and popped
	off from to top of the stack again later.
	
	1.6. Queue 
	A Queue data structure is intended to hold the elements (put by producer threads) prior to processing by
	consumer threads. Besides basic Collection operations, queues provide additional insertion. extration. and
	inspection operations.
	
	Queue typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner. One such 
	exception is priority queue which order elements according t oa supplied Comparator, or the elements' natural
	ordering.
	
	In general, queues do not support blocking insertion or retrieval operations. Blocking queue implementations
	classes implement BlockingQueue interface.
	
	Some useful classes which implement Map interface are - ArrayBlockingQueue, ArrayDeque, ConcurrentLinkedDeque,
	ConcurrentLinkedQueue, DelayQueue, LinkedBlockingDeque, LinkedBlockingQueue, LinkedList, LinkTransferQueue,
	PriorityBlockingQueue, PriorityQueue and SynchronousQueue.
	
	1.7. Deque
	
	A double ended queue (pronounced 'deck') that supports element insertion and removal at both ends. When a deque
	is used a queue, FIFO behavior results. When a deque is used as a stack, LIFO behavior results. When a deque
	us used as a stack, LIFO behavior results
	
	
	
	
	
	
	